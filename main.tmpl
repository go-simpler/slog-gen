// Code generated by go-simpler.org/sloggen. DO NOT EDIT.

package {{$.Pkg}}

{{range $.Imports -}}
import "{{.}}"
{{end}}

{{range $severity, $name := $.Levels -}}
const Level{{title $name}} = slog.Level({{$severity}})
{{end}}

{{range $.Consts -}}
const {{snakeToCamel .}} = "{{.}}"
{{end}}

{{range $key, $type := $.Attrs -}}
func {{snakeToCamel $key}}(value {{$type}}) slog.Attr { return slog.{{slogFunc $type}}("{{$key}}", value) }
{{end}}

{{if gt (len $.Levels) 0}}
func ParseLevel(s string) (slog.Level, error) {
	switch strings.ToUpper(s) {
	{{range $_, $name := $.Levels -}}
	case "{{upper $name}}":
		return Level{{title $name}}, nil
	{{end -}}
	default:
		return 0, fmt.Errorf("slog: level string %q: unknown name", s)
	}
}

func ReplaceAttr(_ []string, attr slog.Attr) slog.Attr {
	if attr.Key != slog.LevelKey {
		return attr
	}
	switch attr.Value.Any().(slog.Level) {
	{{range $_, $name := $.Levels -}}
	case Level{{title $name}}:
		attr.Value = slog.StringValue("{{upper $name}}")
	{{end -}}
	}
	return attr
}
{{end}}

{{if $l := $.Logger}}
type Logger struct{ Logger *slog.Logger }
{{range $_, $name := $l.Levels}}
func (l *Logger) {{title $name}}({{if $l.Context}}ctx context.Context, {{end}}msg string, {{if $l.AttrAPI}}attrs ...slog.Attr{{else}}args ...any{{end}}) {
	l.log({{if $l.Context}}ctx{{else}}context.Background(){{end}}, {{if eq (len $.Levels) 0}}slog.{{end}}Level{{title $name}}, msg, {{if $l.AttrAPI}}attrs{{else}}args{{end}})
}
{{end}}
func (l *Logger) log(ctx context.Context, level slog.Level, msg string, {{if $l.AttrAPI}}attrs []slog.Attr{{else}}args []any{{end}}) {
	if !l.Logger.Enabled(ctx, level) {
		return
	}
	var pcs [1]uintptr
	runtime.Callers(3, pcs[:])
	r := slog.NewRecord(time.Now(), level, msg, pcs[0])
	r.Add{{if $l.AttrAPI}}Attrs(attrs...){{else}}(args...){{end}}
	_ = l.Logger.Handler().Handle(ctx, r)
}
{{end}}
