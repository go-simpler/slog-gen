package main

import (
	"bytes"
	"context"
	"log/slog"
	"strings"
	"testing"

	"go-simpler.org/assert"
	. "go-simpler.org/assert/dotimport"
	"go-simpler.org/slog-gen/example"
)

//go:generate go run main.go codegen.go --config=.slog.example.yml

func Test_readConfig(t *testing.T) {
	r := strings.NewReader(`
pkg: test
imports: [time]
levels: {custom: -8}
consts: [foo]
attrs:
  bar: time.Time
  baz: time.Duration
`)

	want := &config{
		Pkg:     "test",
		Imports: []string{"fmt", "log/slog", "strings", "time"},
		Levels:  []level{{Name: "custom", Severity: -8}},
		Consts:  []string{"foo"},
		Attrs: []attr{
			{Key: "bar", Type: "time.Time"},
			{Key: "baz", Type: "time.Duration"},
		},
		HasCustomLevels: true,
	}

	got, err := readConfig(r)
	assert.NoErr[F](t, err)
	assert.Equal[E](t, got, want)
}

func Test_writeCode(t *testing.T) {
	cfg := config{
		Pkg:     "test",
		Imports: []string{"log/slog"},
		Levels:  []level{{Name: "custom", Severity: -8}},
		Consts:  []string{"foo"},
		Attrs: []attr{
			{Key: "bar", Type: "int"},
			{Key: "baz", Type: "error"},
		},
		HasCustomLevels: true,
	}

	const src = `// Code generated by go-simpler.org/slog-gen. DO NOT EDIT.

package test

import "log/slog"

const LevelCustom = slog.Level(-8)

const Foo = "foo"

func Bar(value int) slog.Attr {
	return slog.Int("bar", value)
}

func Baz(value error) slog.Attr {
	return slog.Any("baz", value)
}

func ParseLevel(s string) (slog.Level, error) {
	switch strings.ToUpper(s) {
	case "CUSTOM":
		return LevelCustom, nil
	default:
		return 0, fmt.Errorf("slog: level string %q: unknown name", s)
	}
}

func ReplaceAttr(_ []string, attr slog.Attr) slog.Attr {
	if attr.Key != slog.LevelKey {
		return attr
	}
	switch attr.Value.Any().(slog.Level) {
	case LevelCustom:
		attr.Value = slog.StringValue("CUSTOM")
	}
	return attr
}
`

	var buf bytes.Buffer
	err := writeCode(&buf, &cfg)
	assert.NoErr[F](t, err)
	assert.Equal[E](t, buf.String(), src)
}

func TestParseLevel(t *testing.T) {
	level, err := example.ParseLevel("TRACE")
	assert.NoErr[F](t, err)
	assert.Equal[E](t, level, example.LevelTrace)
}

func TestReplaceAttr(t *testing.T) {
	var buf bytes.Buffer

	logger := slog.New(slog.NewTextHandler(&buf, &slog.HandlerOptions{
		Level: example.LevelTrace,
		ReplaceAttr: func(groups []string, attr slog.Attr) slog.Attr {
			if attr.Key == slog.TimeKey {
				return slog.Attr{}
			}
			return example.ReplaceAttr(groups, attr)
		},
	}))

	logger.Log(context.Background(), example.LevelTrace, "test")
	assert.Equal[E](t, buf.String(), "level=TRACE msg=test\n")
}
