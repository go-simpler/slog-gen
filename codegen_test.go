package main

import (
	"bytes"
	"strings"
	"testing"

	"go-simpler.org/assert"
	. "go-simpler.org/assert/dotimport"
)

func Test_tmplExecute(t *testing.T) {
	cfg := config{
		Pkg:     "test",
		Imports: []string{"log/slog"},
		Attrs: []attr{
			{Key: "foo", Type: "int"},
			{Key: "bar", Type: "error"},
		},
	}

	const codegen = `// Code generated by go-simpler.org/slog-gen. DO NOT EDIT.

package test

import "log/slog"

func Foo(value int) slog.Attr {
	return slog.Int("foo", value)
}

func Bar(value error) slog.Attr {
	return slog.Any("bar", value)
}
`

	var buf bytes.Buffer
	err := tmpl.Execute(&buf, cfg)
	assert.NoErr[F](t, err)
	assert.Equal[E](t, buf.String(), codegen)
}

func Test_readConfig(t *testing.T) {
	r := strings.NewReader(`
pkg: test
imports:
  - time
attrs:
  foo: time.Time
  bar: time.Duration
`)

	want := config{
		Pkg:     "test",
		Imports: []string{"log/slog", "time"},
		Attrs: []attr{
			{Key: "bar", Type: "time.Duration"},
			{Key: "foo", Type: "time.Time"},
		},
	}

	got, err := readConfig(r)
	assert.NoErr[F](t, err)
	assert.Equal[E](t, got, want)
}
