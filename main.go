package main

import (
	"errors"
	"flag"
	"fmt"
	"os"
	"strings"
	"text/template"

	"go-simpler.org/errorsx"
	"gopkg.in/yaml.v3"
)

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func run() (err error) {
	var cfgPath string

	fs := flag.NewFlagSet("slog-gen", flag.ContinueOnError)
	fs.StringVar(&cfgPath, "config", ".slog.yml", "config path")
	if err := fs.Parse(os.Args[1:]); err != nil {
		return fmt.Errorf("parsing flags: %w", err)
	}

	cfg, err := loadConfig(cfgPath)
	if err != nil {
		return err
	}
	cfg.Imports = []string{"log/slog"}

	for _, typeName := range cfg.Attrs {
		if strings.HasPrefix(typeName, "time.") {
			cfg.Imports = append(cfg.Imports, "time")
			break
		}
	}

	if err := os.Mkdir(cfg.Pkg, 0755); err != nil && !errors.Is(err, os.ErrExist) {
		return fmt.Errorf("mkdir %s: %w", cfg.Pkg, err)
	}

	f, err := os.Create(cfg.Pkg + "/attr.go")
	if err != nil {
		return fmt.Errorf("creating file: %w", err)
	}
	defer errorsx.Close(f, &err)

	if err := tmpl.Execute(f, cfg); err != nil {
		return fmt.Errorf("executing template: %w", err)
	}

	return nil
}

var tmpl = template.Must(template.New("").Funcs(funcs).Parse(
	`// Code generated by go-simpler.org/slog-gen. DO NOT EDIT.

package {{.Pkg}}

{{range .Imports -}}
import "{{.}}"
{{end -}}

{{range $key, $type := .Attrs}}
func {{snakeToCamel $key}}(value {{$type}}) slog.Attr {
	return slog.{{slogFunc $type}}("{{$key}}", value)
}
{{end}}`,
))

type config struct {
	Pkg     string            `yaml:"pkg"`
	Imports []string          `yaml:"imports"`
	Attrs   map[string]string `yaml:"attrs"` // key:type
}

func loadConfig(path string) (*config, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("reading config: %w", err)
	}

	var cfg config
	if err := yaml.Unmarshal(data, &cfg); err != nil {
		return nil, fmt.Errorf("decoding config: %w", err)
	}

	return &cfg, nil
}

var funcs = template.FuncMap{
	"snakeToCamel": func(s string) string {
		parts := strings.Split(s, "_")
		for i := range parts {
			parts[i] = strings.Title(parts[i])
		}
		return strings.Join(parts, "")
	},
	"slogFunc": func(typ string) string {
		switch s := strings.Title(strings.TrimPrefix(typ, "time.")); s {
		case "String", "Int64", "Int", "Uint64", "Float64", "Bool", "Time", "Duration":
			return s
		default:
			return "Any"
		}
	},
}
