package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"os"
	"strings"

	"go-simpler.org/errorsx"
	"gopkg.in/yaml.v3"
)

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func run() error {
	var cfgPath string

	fs := flag.NewFlagSet("slog-gen", flag.ContinueOnError)
	fs.StringVar(&cfgPath, "config", ".slog.yml", "config path")
	if err := fs.Parse(os.Args[1:]); err != nil {
		return fmt.Errorf("parsing flags: %w", err)
	}

	cfg, err := loadConfig(cfgPath)
	if err != nil {
		return err
	}

	imports := []string{"log/slog"}
	for _, typeName := range cfg.Attrs {
		if strings.HasPrefix(typeName, "time.") {
			imports = append(imports, "time")
			break
		}
	}

	// TODO: replace with text/template?
	var buf bytes.Buffer
	write := func(format string, args ...any) {
		_, _ = fmt.Fprintf(&buf, format+"\n", args...)
	}

	write("// Code generated by go-simpler.org/slog-gen. DO NOT EDIT.\n")
	write("package %s\n", cfg.Pkg)
	for _, imp := range imports {
		write(`import "%s"`, imp)
	}

	for attrName, typeName := range cfg.Attrs {
		funcName := strings.Title(strings.TrimPrefix(typeName, "time."))
		if _, builtin := map[string]struct{}{
			"String":   {},
			"Int64":    {},
			"Int":      {},
			"Uint64":   {},
			"Float64":  {},
			"Bool":     {},
			"Time":     {},
			"Duration": {},
		}[funcName]; !builtin {
			funcName = "Any"
		}

		write(`
func %s(value %s) slog.Attr {
	return slog.%s("%s", value)
}`, snakeToCamel(attrName), typeName, funcName, attrName)
	}

	if err := os.Mkdir(cfg.Pkg, 0755); err != nil && !errors.Is(err, os.ErrExist) {
		return fmt.Errorf("mkdir %s: %w", cfg.Pkg, err)
	}
	if err := os.WriteFile(cfg.Pkg+"/attr.go", buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("writing file: %w", err)
	}

	return nil
}

type config struct {
	Pkg   string            `yaml:"pkg"`
	Attrs map[string]string `yaml:"attrs"`
}

func loadConfig(path string) (_ *config, err error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("opening config: %w", err)
	}
	defer errorsx.Close(f, &err)

	var cfg config
	if err := yaml.NewDecoder(f).Decode(&cfg); err != nil {
		return nil, fmt.Errorf("decoding config: %w", err)
	}

	return &cfg, nil
}

func snakeToCamel(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = strings.Title(parts[i])
	}
	return strings.Join(parts, "")
}
